name: "MiNiFi-CPP CI"
on: [push, pull_request, workflow_dispatch]
env:
  DOCKER_CMAKE_FLAGS: -DDOCKER_VERIFY_THREAD=3 -DUSE_SHARED_LIBS= -DSTRICT_GSL_CHECKS=AUDIT -DCI_BUILD=ON -DENABLE_AWS=ON -DENABLE_KAFKA=ON -DENABLE_MQTT=ON -DENABLE_AZURE=ON -DENABLE_SQL=ON \
    -DENABLE_SPLUNK=ON -DENABLE_GCP=ON -DENABLE_OPC=ON -DENABLE_PYTHON_SCRIPTING=ON -DENABLE_LUA_SCRIPTING=ON -DENABLE_KUBERNETES=ON -DENABLE_TEST_PROCESSORS=ON -DENABLE_PROMETHEUS=ON \
    -DENABLE_ELASTICSEARCH=ON -DENABLE_GRAFANA_LOKI=ON -DENABLE_COUCHBASE=ON -DENABLE_LLAMACPP=ON -DDOCKER_BUILD_ONLY=ON -DMINIFI_PERFORMANCE_TESTS=ON
  SCCACHE_GHA_ENABLE: true
  CCACHE_DIR: ${{ GITHUB.WORKSPACE }}/.ccache
jobs:
  ubuntu_22_04_clang_arm:
    name: "Ubuntu 22.04 clang aarch64"
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 240
    env:
      UBUNTU_CLANG_MINIFI_OPTIONS: >-
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DCI_BUILD=OFF
        -DCUSTOM_MALLOC=OFF
        -DDOCKER_BUILD_ONLY=OFF
        -DDOCKER_PUSH=OFF
        -DDOCKER_SKIP_TESTS=ON
        -DENABLE_ALL=OFF
        -DENABLE_AWS=ON
        -DENABLE_AZURE=ON
        -DENABLE_BUSTACHE=ON
        -DENABLE_BZIP2=ON
        -DENABLE_CIVET=ON
        -DENABLE_CONTROLLER=ON
        -DENABLE_COUCHBASE=ON
        -DENABLE_ELASTICSEARCH=ON
        -DENABLE_ENCRYPT_CONFIG=ON
        -DENABLE_EXPRESSION_LANGUAGE=ON
        -DENABLE_EXECUTE_PROCESS=ON
        -DENABLE_GCP=ON
        -DENABLE_GRAFANA_LOKI=ON
        -DENABLE_KUBERNETES=ON
        -DENABLE_LIBARCHIVE=ON
        -DENABLE_LLAMACPP=ON
        -DENABLE_KAFKA=ON
        -DENABLE_LUA_SCRIPTING=ON
        -DENABLE_LZMA=ON
        -DENABLE_MQTT=ON
        -DENABLE_OPC=ON
        -DENABLE_OPENCV=ON
        -DENABLE_OPS=ON
        -DENABLE_PROCFS=ON
        -DENABLE_PROMETHEUS=ON
        -DENABLE_PYTHON_SCRIPTING=ON
        -DENABLE_ROCKSDB=ON
        -DENABLE_SFTP=ON
        -DENABLE_SPLUNK=ON
        -DENABLE_SQL=ON
        -DENABLE_SYSTEMD=ON
        -DENABLE_TEST_PROCESSORS=OFF
        -DFORCE_COLORED_OUTPUT=ON
        -DMINIFI_FAIL_ON_WARNINGS=ON
        -DPORTABLE=ON
        -DSKIP_TESTS=OFF
        -DMINIFI_USE_REAL_ODBC_TEST_DRIVER=OFF
        -DUSE_SHARED_LIBS=ON
        -DMINIFI_PERFORMANCE_TESTS=ON
    steps:
      - id: checkout
        uses: actions/checkout@v4
      - name: cache restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ubuntu-22.04-arm-all-clang-ccache-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ubuntu-22.04-arm-all-clang-ccache-${{github.ref}}-
            ubuntu-22.04-arm-all-clang-ccache-refs/heads/main-
      - id: install_deps
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy main" | sudo tee -a /etc/apt/sources.list
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install -y ccache libfl-dev clang-16 clang-tidy-16 libc++-16-dev libc++abi-16-dev libc++1-16 libc++abi1-16 libunwind-16 libsqliteodbc parallel
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          echo -e "127.0.0.1\t$HOSTNAME" | sudo tee -a /etc/hosts > /dev/null
      - id: free_disk_space
        run: |
          # We can gain additional disk space on the Ubuntu runners thanks to these suggestions:
          # https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          # https://github.com/actions/runner-images/issues/2606#issuecomment-772683150
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: build
        run: |
          export CC=clang-16
          export CXX=clang++-16
          export CXXFLAGS="-stdlib=libc++"
          export LDFLAGS="-stdlib=libc++"
          python3 -m venv venv && source venv/bin/activate \
            && pip install -r requirements.txt \
            && python main.py --noninteractive --skip-compiler-install --cmake-options="-DSTRICT_GSL_CHECKS=AUDIT -DCMAKE_EXPORT_COMPILE_COMMANDS=ON" --minifi-options="${UBUNTU_CLANG_MINIFI_OPTIONS}"
        working-directory: bootstrap
      - id: cache_save
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ubuntu-22.04-arm-all-clang-ccache-${{github.ref}}-${{github.sha}}
      - name: test
        id: test
        run: |
          # Set core file size limit to unlimited
          ulimit -c unlimited
          ctest --timeout 300 -j$(nproc) --output-on-failure -LE performance
        working-directory: build
      - name: performance-test
        id: performance-test
        run: ctest -j1 --verbose -L performance
        working-directory: build
      - id: files
        uses: Ana06/get-changed-files@v2.3.0
        continue-on-error: true
      - name: clang-tidy
        run: |
          if [[ -n "${{ steps.files.outputs.all }}" ]]; then
            FILES="${{ steps.files.outputs.all }}"
          else
            git fetch origin main && git checkout -b main origin/main || true
            FILES=$(git diff --name-only main ${{ github.sha }} --)
            git checkout ${{ github.sha }}
          fi
          # https://stackoverflow.com/questions/58466701/clang-tidy-cant-locate-stdlib-headers
          sed -i -e 's/\/usr\/lib\/ccache\/clang++-16/\/lib\/llvm-16\/bin\/clang++/g' build/compile_commands.json
          sed -i -e 's/\/usr\/lib\/ccache\/clang-16/\/lib\/llvm-16\/bin\/clang/g' build/compile_commands.json
          sed -i -e 's/\/usr\/lib\/ccache\/c++/\/lib\/llvm-16\/bin\/clang++/g' build/compile_commands.json
          sed -i -e 's/\/usr\/lib\/ccache\/cc/\/lib\/llvm-16\/bin\/clang/g' build/compile_commands.json

          parallel -j$(( $(nproc) + 1 )) ./run_clang_tidy.sh ::: ${FILES}
      - name: check-cores
        if: ${{ failure() && steps.test.conclusion == 'failure' }}
        run: |
          if [ "$(ls -A /var/lib/apport/coredump/)" ]; then echo "CORES_EXIST=true" >> $GITHUB_ENV; fi
      - uses: actions/upload-artifact@v4
        if: ${{ failure() && env.CORES_EXIST == 'true' }}
        with:
          name: ubuntu-clang-coredumps
          path: /var/lib/apport/coredump/
      - uses: actions/upload-artifact@v4
        if: ${{ failure() && env.CORES_EXIST == 'true' }}
        with:
          name: ubuntu-clang-binaries
          path: build/bin
